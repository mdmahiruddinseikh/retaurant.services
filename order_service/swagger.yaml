openapi: 3.0.1
info:
  title: Order Service CRUD APIs
  description: All CRUD APIs
  version: 0.0.1
servers:
- url: http://localhost:8082
paths:
  /orders:
     post:
      security:
        - bearerAuth: []
      tags: 
        - OrderService
      summary: Create new order
      operationId: createOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/definitions/CreateOrderCreateReqObj"
      responses:
        200:
          description: Create order
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    exaple: 200
                  response:
                    type: String
                    example: success
                  msg:
                    type: String
                    example: New order created.
                  data:
                    type: object
        401:
          description: validation error
          content:
            application/json:
              schema:
                $ref: "#/definitions/ValidationError"
        400:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/definitions/Error"
     get:
      security:
        - bearerAuth: []
      summary: Get all order list.
      operationId: getOrderList
      tags:
        - OrderService
      parameters:
        - in: query
          name: include
          description: To fetch the associations.
          required: false
          schema:
            type: string
            example: all
        - in: query
          name: skip
          description: Skip for pagination.
          required: false
          schema:
            type: integer
            example: 0
        - in: query
          name: limit
          description: limit for pagination.
          required: false
          schema:
            type: integer
            example: 50
      responses:
        200:
          description: Order List.
          content:
            application/json:
              schema:
                $ref: "#/definitions/OrderList"
        401:
          description: validation error
          content:
            application/json:
              schema:
                $ref: "#/definitions/ValidationError"
        400:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/definitions/Error"
  /orders/{id}:
    get:
      security:
        - bearerAuth: []
      summary: get order by id.
      operationId: getOrderById
      tags:
       - OrderService
      parameters:
        - in: path
          name: id
          description: order id.
          required: true
          schema:
            type: string
            example: 1
        - in: query
          name: include
          description: To fetch all the associations.
          required: false
          schema:
            type: string
            example: all
      responses:
        200:
          description: Order data
          content:
            application/json:
              schema:
                $ref: "#/definitions/SpecificOrderData"
        401:
          description: validation error
          content:
            application/json:
              schema:
                $ref: "#/definitions/ValidationError"
        400:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/definitions/Error"
    put:
      security:
        - bearerAuth: []
      tags:
        - OrderService
      summary: Update order data.
      operationId: updateOrderData
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          description: order id
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/definitions/UpdateOrderData"
      responses:
        200:
          description: Update order status.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  response:
                    type: string
                    example: success
                  msg:
                    type: string
                    example: Order data updated successfully. 
        401:
          description: validation error
          content:
            application/json:
              schema:
                $ref: "#/definitions/ValidationError"
        400:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/definitions/Error"
    delete:
      security:
        - bearerAuth: []
      tags:
       - OrderService
      summary: Delete order by id.
      operationId: deleteOrderById
      parameters:
        - in: path
          name: id
          description: order id
          required: true
          schema:
            type: integer
            example: 1
      responses:
        200:
          description: Delete order.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  response:
                    type: string
                    example: success
                  msg:
                    type: string
                    example: Order deleted successfully. 
        401:
          description: validation error
          content:
            application/json:
              schema:
                $ref: "#/definitions/ValidationError"
        400:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/definitions/Error"
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
definitions:
  OrderListObj:
    type: object
    properties:
      status:
        type: integer
        example: 200
      response:
        type: string
        example: success
      billingTypeCode:
        type: object
        properties:
          billingTypeCodesId:
            type: integer
          billingType:
            type: string
          createdAt:
            type: date
            example: "2021-08-12T15:42:52.000Z"
          updatedAt:
            type: date
            example: "2021-08-12T15:42:52.000Z"
  UpdateOrderData:
    type: object
    properties:
      order_status:
        type: string
        enum:
        - accted by restaurant
        - cancelled by customer
        - cancelled by restaurant
        - out for delivery
        - delivered
  CreateOrderCreateReqObj:
    type: object
    properties:
      customer_id:
        type: string
      amount:
        type: integer
      items:
        $ref: "#/definitions/ItemsArr"
  ItemsArr:
    type: array
    items:
      type: object
      properties:
        restaurant_id:
          type: string
        menu_id:
          type: string
        price:
          type: integer
  OrderList:
    type: object
    properties:
      status:
        type: integer
        example: 200
      response:
        type: string
        example: success
      msg:
        type: string
        example: Order list.
      data:
        $ref: "#/definitions/OrderListObjArr"
  SpecificOrderData:
    type: object
    properties:
      status:
        type: integer
        example: 200
      response:
        type: string
        example: success
      msg:
        type: string
        example: Order data.
      data:
        $ref: "#/definitions/OrderListObjData"
  OrderListObjData:
    type: object
    properties:
      id:
        type: integer
      customer_id:
        type: string
      amount:
        type: integer
      order_status:
        type: string
      items: 
        $ref: "#/definitions/ItemListObjArr"
  OrderListObjArr:
    type: array
    items:
      type: object
      properties:
        id:
          type: integer
        customer_id:
          type: string
        amount:
          type: integer
        order_status:
          type: string
        items: 
          $ref: "#/definitions/ItemListObjArr"
  ItemListObjArr:
    type: array
    items:
      type: object
      properties:
        id:
          type: integer
        menu_id:
          type: string
        restaurant_id:
          type: string
        price:
          type: integer
        order_id: 
          type: integer
        createdAt:
          type: date
        updatedAt:
          type: date
  Error:
    type: object
    properties:
      status:
        type: integer
        example: 400
      response:
        type: string
        example: error
      msg:
        type: string
        example: Something went wrong.
      error:
        type: object
        properties:
          name:
            type: string
          errors:
            type: array
            items:
              type: object
              properties:
                message:
                  type: string
  ValidationError:
    type: object
    properties:
      status:
        type: integer
        example: 401
      response:
        type: string
        example: validationerror
      msg:
        type: string
        example: validation msg
  successRes:
    type: object
    required:
      - status
      - response
    properties:
      status:
        type: integer
        example: 200
      response:
        type: string
        example: success
      msg:
        type: string
        example: billing type code has been deleted successfully.
  invalidRes:
    type: object
    required:
      - status
      - response
    properties:
      status:
        type: integer
        example: 400
      response:
        type: string
        example: invailid
      msg:
        type: string
        example: Invailid AdvisorID.
  errorRes:
    type: object
    required:
      - status
      - response
    properties:
      status:
        type: integer
        example: 500
      response:
        type: string
        rxample: error
      msg:
        type: string
        example: Some thing went wrong.